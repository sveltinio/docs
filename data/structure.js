const projectStructure = [
	{
		name: 'config',
		info: 'Accessible across the codebase as <span class="font-semibold">$config</span>. The following files are autogenerated: <ul><li><span class="font-semibold">defaults.js.ts</span>: info on the actual Sveltin version, SvelteKit version and build time;</li><li><span class="font-semibold">externals.js.ts</span>: info on external services used by the app. E.g. Google Fonts, Analytics, etc;</li><li><span class="font-semibold">menu.js.ts</span>: all the entries from the available routes.<br/>Used by <span class="italic">sveltinio/seo</span> components to generate JsonLd objects and usable for a navigation component;</li><li><span class="font-semibold">website.js.ts</span>: configurations for the app. E.g. name, description, logo, sitemap config, etc.</li></ul>'
	},
	{
		name: 'content',
		info: '<ul><li>All the content generated by running <code class="font-mono ">sveltin add content</code>;</li><li>Contents grouped by "resource" name.</li></ul>'
	},
	{
		name: 'src',
		info: 'In SvelteKit powered apps, <span class="italic">src</span> is where you app lives. The folder structure is the same as any other SvelteKit project. Sveltin takes care to autogenerate subfolders and files when using the CLI commands.<ul><li><span class="font-semibold">lib</span> folder: autogenerated utility modules used by Sveltin. Each time you add new resources or metadata by running relative Sveltin commands, new entries will be autogenerated here;</li><li><span class="font-semibold">params</span>: autogenerated <a href="https://kit.svelte.dev/docs/advanced-routing#matching" target="_blank" rel="noopener noreferrer">matching</a> files for Sveltin artifacts;</li><li><span class="font-semibold">routes/api/v1</span> folder: autogenerated REST endpoints. Each time you add new resources or metadata by running relative Sveltin commands, new entries will be autogenerated here.</li></ul>'
	},
	{
		name: 'themes',
		info: 'Accessible across the codebase as <span class="font-semibold">$themes</span>. Contains the folder structure for your theme as described just below. <br/>'
	},
	{
		name: 'themes/<t>',
		info: 'Supposing that <span class="font-semibold">t</span> is your theme name. The following folders and files are autogenerated: <ul><li><span class="font-semibold">components</span> folder: here are you Svelte components used to compose the pages through partials (described below). The idea is to store here private components not directly parts of the page;</li><li><span class="font-semibold">partials</span> folder: here are the partials for your web page. A <span class="italic">partial</span> is a Svelte component used to compose the pages assembling private components from the <span class="italic">component</span> theme folder describe above ;</li><li><span class="font-semibold">theme.config.js</span> file: Contains information about your theme to make it sharable(<span class="underline">note:</span> this feature is not implemented yet by Sveltin).</li></ul>'
	},
	{
		name: 'static',
		info: 'Contains static files and compiled assets with stable URLs.<br/>When Sveltin builds your site, all assets are copied over as-is.'
	},
	{
		name: 'sveltin.json',
		info: 'The main config file for your Sveltin based project. It is uded to share info across multiple parts of the project as well as is read by the CLI when running commands.'
	}
];

export { projectStructure };
